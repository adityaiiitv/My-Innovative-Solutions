class Node{
    int key;
    int value;
    Node next;
    Node prev;
    public Node(int key, int val)
    {
        this.key = key;
        this.value = val;
    }
}
class LRUCache {

    int capacity;
    Map<Integer, Node> map;
    Node head, tail;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        head = new Node(0,0);
        tail = new Node(0,0);
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(map.containsKey(key))
        {
            Node temp = map.get(key);
            moveToFront(temp);
            return temp.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key))
        {
            Node temp = map.get(key);
            temp.value = value;
            moveToFront(temp);
            return;    
        }
        Node temp = new Node(key,value);
        moveToFront(temp);
        map.put(key, temp);
        capacity--;
        if(capacity<0)
        {
            temp = tail.prev;
            temp.prev.next = tail;
            tail.prev = temp.prev;
            map.remove(temp.key);
            capacity++;
        }
    }
    
    private void moveToFront(Node temp)
    {
        if(temp.prev!=null)
        {
            temp.prev.next = temp.next;        
            temp.next.prev = temp.prev;
        }
        temp.next = head.next;
        temp.next.prev = temp;
        head.next = temp;
        temp.prev = head;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */